import { Markup } from "telegraf";
import { getUserSettings, saveUserSettings } from "../data/userSettings.js";
import logger from "../utils/logger.js";
import { MESSAGES, COMMANDS } from "../utils/constants.js";

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
const profileEditState = new Map();

// –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const EDIT_STATES = {
  IDLE: "idle",
  EDITING_NAME: "editing_name",
  EDITING_BIRTHDATE: "editing_birthdate",
  EDITING_BIRTHTIME: "editing_birthtime",
};

export class SettingsService {
  /**
   * Handles the settings command
   * @param {Object} ctx - Telegraf context
   */
  static async handleSettingsCommand(ctx) {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        logger.warn("No user ID in context");
        return;
      }

      logger.info("User requested settings", { userId });

      const settings = getUserSettings(userId);

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback("üë§ –ü—Ä–æ—Ñ–∏–ª—å", "settings:profile")],
        [Markup.button.callback(MESSAGES.BACK_BUTTON, `command:${COMMANDS.MENU}`)],
      ]);

      await ctx.reply("–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:", keyboard);
    } catch (error) {
      logger.error("Error in handleSettingsCommand:", error);
      try {
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      } catch (replyError) {
        logger.error("Failed to send error message:", replyError);
      }
    }
  }

  /**
   * Handles the selection of a settings section
   * @param {Object} ctx - Telegraf context
   * @param {string} section - Settings section
   */
  static async handleSettingsSection(ctx, section) {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        logger.warn("No user ID in context");
        return;
      }

      logger.info("User selected settings section", { section, userId });

      try {
        await ctx.answerCbQuery();
      } catch (cbError) {
        logger.warn("Could not answer callback query", { error: cbError.message });
      }

      switch (section) {
        case "profile":
          await SettingsService.showProfileSettings(ctx);
          break;
        case "edit_name":
          await SettingsService.startEditName(ctx);
          break;
        case "edit_birthdate":
          await SettingsService.startEditBirthdate(ctx);
          break;
        case "edit_birthtime":
          await SettingsService.startEditBirthtime(ctx);
          break;
        case "back":
          await SettingsService.handleSettingsCommand(ctx);
          break;
        default:
          await ctx.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫");
      }
    } catch (error) {
      logger.error("Error in handleSettingsSection:", error);
      try {
        await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
      } catch (replyError) {
        logger.error("Failed to send error message:", replyError);
      }
    }
  }

  /**
   * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
   * @param {Object} ctx - Telegraf context
   */
  static async showProfileSettings(ctx) {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        logger.warn("No user ID in context");
        return;
      }

      const settings = getUserSettings(userId);
      let profileText = "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è:\n\n";

      if (settings.personalDataSet) {
        profileText += `–ò–º—è: ${settings.name || "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n`;
        profileText += `–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: ${settings.birthdate || "–ù–µ –∑–∞–¥–∞–Ω–∞"}\n`;
        profileText += `–í—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è: ${settings.birthtime || "–ù–µ –∑–∞–¥–∞–Ω–æ"}\n`;
      } else {
        profileText += "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.";
      }

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è", "settings:edit_name")],
        [Markup.button.callback("üóì –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "settings:edit_birthdate")],
        [Markup.button.callback("üïí –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è", "settings:edit_birthtime")],
        [Markup.button.callback(MESSAGES.BACK_BUTTON, "settings:back")],
      ]);

      await ctx.reply(profileText, keyboard);
    } catch (error) {
      logger.error("Error in showProfileSettings:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–º–µ–Ω–∏
   * @param {Object} ctx - Telegraf context
   */
  static async startEditName(ctx) {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        logger.warn("No user ID in context");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      profileEditState.set(userId, {
        state: EDIT_STATES.EDITING_NAME,
      });

      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:");
    } catch (error) {
      logger.error("Error in startEditName:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è
   * @param {Object} ctx - Telegraf context
   */
  static async startEditBirthdate(ctx) {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        logger.warn("No user ID in context");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      profileEditState.set(userId, {
        state: EDIT_STATES.EDITING_BIRTHDATE,
      });

      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ì–ì–ì–ì-–ú–ú-–î–î):");
    } catch (error) {
      logger.error("Error in startEditBirthdate:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * –ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è
   * @param {Object} ctx - Telegraf context
   */
  static async startEditBirthtime(ctx) {
    try {
      const userId = ctx.from?.id;
      if (!userId) {
        logger.warn("No user ID in context");
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      profileEditState.set(userId, {
        state: EDIT_STATES.EDITING_BIRTHTIME,
      });

      await ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è —Ä–æ–∂–¥–µ–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):");
    } catch (error) {
      logger.error("Error in startEditBirthtime:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
   * @param {Object} ctx - Telegraf context
   * @returns {boolean} - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ
   */
  static async handleProfileEdit(ctx) {
    const userId = ctx.from?.id;
    if (!userId) return false;

    const editState = profileEditState.get(userId);
    if (!editState) return false;

    try {
      const text = ctx.message.text;
      const settings = getUserSettings(userId);
      let updateData = {};
      let errorMessage = null;

      switch (editState.state) {
        case EDIT_STATES.EDITING_NAME:
          updateData = { name: text };
          break;

        case EDIT_STATES.EDITING_BIRTHDATE:
          // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã YYYY-MM-DD
          if (!/^\d{4}-\d{2}-\d{2}$/.test(text)) {
            errorMessage = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1990-01-31)";
            return true;
          }
          updateData = { birthdate: text };
          break;

        case EDIT_STATES.EDITING_BIRTHTIME:
          // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ HH:MM
          if (!/^\d{2}:\d{2}$/.test(text)) {
            errorMessage = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30)";
            return true;
          }
          updateData = { birthtime: text };
          break;

        default:
          return false;
      }

      if (errorMessage) {
        await ctx.reply(errorMessage);
        return true;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ personalDataSet, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
      const newSettings = { ...updateData };
      if (!settings.personalDataSet && settings.name && settings.birthdate && settings.birthtime) {
        newSettings.personalDataSet = true;
      }

      saveUserSettings(userId, newSettings);

      // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      profileEditState.delete(userId);

      await ctx.reply("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
      await SettingsService.showProfileSettings(ctx);

      return true;
    } catch (error) {
      logger.error("Error in handleProfileEdit:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
      profileEditState.delete(userId);
      return true;
    }
  }
}
